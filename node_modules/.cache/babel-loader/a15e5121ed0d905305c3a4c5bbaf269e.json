{"ast":null,"code":"import{combineReducers,createStore}from'redux';//import { searchResultReducer } from './search/reducer';\nimport{persistStore,persistReducer}from'redux-persist';import storage from'redux-persist/lib/storage';// defaults to localStorage for web\nvar persistConfig={key:'root',storage:storage};var rootReducer=combineReducers({//search: searchResultReducer\n});// if (process.env.NODE_ENV === 'development') {\n//   const { logger } = require(`redux-logger`);\n//   middlewares.push(logger);\n// }\nvar persistedReducer=persistReducer(persistConfig,rootReducer);export default function(){//   const enhancer = compose(applyMiddleware(...middlewares));\nvar store=createStore(persistedReducer);console.log(store.getState());// @ts-ignore\nvar persistor=persistStore(store);return{store:store,persistor:persistor};}","map":{"version":3,"sources":["/Users/adrian/Documents/GitHub/contact/crudcontact/src/store/index.ts"],"names":["combineReducers","createStore","persistStore","persistReducer","storage","persistConfig","key","rootReducer","persistedReducer","store","console","log","getState","persistor"],"mappings":"AAAA,OAASA,eAAT,CAA0BC,WAA1B,KAA6C,OAA7C,CAEA;AACA,OAASC,YAAT,CAAuBC,cAAvB,KAA6C,eAA7C,CACA,MAAOC,CAAAA,OAAP,KAAoB,2BAApB,CAAiD;AAGjD,GAAMC,CAAAA,aAAa,CAAG,CACpBC,GAAG,CAAE,MADe,CAEpBF,OAAO,CAAPA,OAFoB,CAAtB,CAUA,GAAMG,CAAAA,WAAW,CAAGP,eAAe,CAAC,CAElC;AAFkC,CAAD,CAAnC,CAOA;AACA;AACA;AACA;AAEA,GAAMQ,CAAAA,gBAAgB,CAAGL,cAAc,CAACE,aAAD,CAAgBE,WAAhB,CAAvC,CAEA,cAAe,WAAW,CACxB;AACA,GAAME,CAAAA,KAAK,CAAGR,WAAW,CAACO,gBAAD,CAAzB,CACAE,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,EACA;AACA,GAAMC,CAAAA,SAAS,CAAGX,YAAY,CAACO,KAAD,CAA9B,CACA,MAAO,CAAEA,KAAK,CAALA,KAAF,CAASI,SAAS,CAATA,SAAT,CAAP,CACD","sourcesContent":["import { combineReducers, createStore } from 'redux';\n\n//import { searchResultReducer } from './search/reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport interface StoreStateType {\n\n  //   search: ResultState;\n}\n\nconst rootReducer = combineReducers({\n\n  //search: searchResultReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\n// if (process.env.NODE_ENV === 'development') {\n//   const { logger } = require(`redux-logger`);\n//   middlewares.push(logger);\n// }\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function() {\n  //   const enhancer = compose(applyMiddleware(...middlewares));\n  const store = createStore(persistedReducer);\n  console.log(store.getState());\n  // @ts-ignore\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n"]},"metadata":{},"sourceType":"module"}