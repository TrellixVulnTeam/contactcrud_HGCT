{"ast":null,"code":"import { combineReducers, createStore } from 'redux'; //import { searchResultReducer } from './search/reducer';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst rootReducer = combineReducers({//search: searchResultReducer\n});\n// if (process.env.NODE_ENV === 'development') {\n//   const { logger } = require(`redux-logger`);\n//   middlewares.push(logger);\n// }\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default function () {\n  //   const enhancer = compose(applyMiddleware(...middlewares));\n  const store = createStore(persistedReducer);\n  console.log(store.getState()); // @ts-ignore\n\n  const persistor = persistStore(store);\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"sources":["/Users/adrian/Documents/GitHub/contact/crudcontact/src/store/index.ts"],"names":["combineReducers","createStore","persistStore","persistReducer","storage","persistConfig","key","rootReducer","persistedReducer","store","console","log","getState","persistor"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C,C,CAEA;;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAiD;;AAGjD,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBF,EAAAA;AAFoB,CAAtB;AAUA,MAAMG,WAAW,GAAGP,eAAe,CAAC,CAElC;AAFkC,CAAD,CAAnC;AAOA;AACA;AACA;AACA;AAEA,MAAMQ,gBAAgB,GAAGL,cAAc,CAACE,aAAD,EAAgBE,WAAhB,CAAvC;AAEA,eAAe,YAAW;AACxB;AACA,QAAME,KAAK,GAAGR,WAAW,CAACO,gBAAD,CAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,EAHwB,CAIxB;;AACA,QAAMC,SAAS,GAAGX,YAAY,CAACO,KAAD,CAA9B;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASI,IAAAA;AAAT,GAAP;AACD","sourcesContent":["import { combineReducers, createStore } from 'redux';\n\n//import { searchResultReducer } from './search/reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport interface StoreStateType {\n\n  //   search: ResultState;\n}\n\nconst rootReducer = combineReducers({\n\n  //search: searchResultReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\n// if (process.env.NODE_ENV === 'development') {\n//   const { logger } = require(`redux-logger`);\n//   middlewares.push(logger);\n// }\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function() {\n  //   const enhancer = compose(applyMiddleware(...middlewares));\n  const store = createStore(persistedReducer);\n  console.log(store.getState());\n  // @ts-ignore\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n"]},"metadata":{},"sourceType":"module"}